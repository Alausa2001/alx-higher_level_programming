==========================================
This is the doctest for 0.0-add_integer.py
==========================================
``add_integer()`` function takes two argument
and returns their sum. It can only take integers or
floating point numbers as argument
::
	>>> add_integer = __import__("0-add_integer").add_integer
	>>> add_integer(2, 3)
	5

This can also work for floating point numbers
::
	>>> add_integer(3, 2.0)
	5

It gives a typeerror if used with a non-integer or non-float
::
	>>> add_integer('a', 22)
	Traceback (most recent call last):
	TypeError: a must be an integer

This will work because the second arg has a default value(98)

::

	>>> add_integer(23)
	121

If either arguments are non-integer and non-floats, a TypeError is raised:

::

	>>> add_integer("r", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2, "hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

This function doesn't support infinity

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer


NaN numbers

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
